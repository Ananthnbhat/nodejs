**express
initially do,
var app=express();
app.listen(3000,()=>{
console.log('starting on port 3000')});

2arguments used for every single express route,
ex:
app.post('url',(req,res)=>{});

2 types of sending data on request
1 using app.send
another, using express middleware which gives the file directory to the server which accesses the file in that directory
**middleware-accesses req and res objects,modifies them if required(if you want express to do something which is not there in express,
you can teach it using middleware)
app.use is used to register the middlware.
(middleware,partial,helper which helps partials)

**app.render is used to send a template engine or a handlebar
whereas app.send is a simple send which is used to send ,for example an error meassage.

**app.use is used to bind or register or configure a middleware to our application,there can be 3rd party module middleware like body-parser or custom middleware.
if it is 3rd party module then,ex: app.use(bodyParser.json());
if it is custom middleware then,ex:
app.use((req,res,next)=>{
    var now=new Date().toString();
    var log=`${now}:${req.method} ${req.url}`;
    console.log(log);
    fs.appendFile('server.log',log+'\n',(err)=>{ 
        if(err){
            console.log('Unable to append to server.log');
        }
    });
    next();

});//custom middleware?

app.get example://app.get is only used for going to some link,it is not used to submit something and then go to some link(app.post is used for that)
app.get('/about',(req,res)=>{
res.render('about.hbs',{
    pageTitle:'About page'
});
});

app.post example,//whatever user submits on the client side will bbe stored in req.body which is accessed by express for further use
app.post('/todos', (req, res) => {
    console.log(req.body);
});
**template (view) engine-handlebars
*hbs plugin(3rd party module)is used to wrap/implement handlebars in nodejs
**views is the default dir express uses for templates.
*to display/render a template use res.render('filenmae.hbs')//hbs for handlebars
**Handlebars allows for reuse of some code/template through partials.
 Partials are normal Handlebars templates that may be called directly by other templates. 
hbs.registerPartials(__dirname + '/views/partials');
**hbs.registerHelper('getCurrentYear',()=>{
    return new Date().getFullYear();
}); Helper can be used to help a partial

**the definition of middleware should have next(); at the end,otherwise the process wont proceed.
**middleware is executed in the order in which app.use is written

**install git
git --version(in node-web-server in git bash)
git init
git status- to check the status of the files
git add server.js
git add package.json
create a .gitignore file in node-web-server(root) and write
node-modules
server.log
in that file so that git will ignore any changes done to thos files.
then,
git add .gitignore
at the end,save
git commit
git push-to push the saved git to github
**creating ssh key
to create- $ssh-keygen -t rsa -b 4096 -C "email@gmail.com"
to check whether key is present or not-$ls -al ~/.ssh
id_rsa is the private key
id_rsa.pub is the public key
to know the presence of ssh agent-$eval "$(ssh-agen -s)"
to add the ssh key to ssh agen-$ssh-add ~/.ssh/id_rsa
to copy the public key to clipboard-$clip <~/.ssh/id_rsa.pub and paste it in ssh page in github to add the new ssh key.

**heroku-create account,download heroku cli,login in git bash using $heroku login
then-$herku keys:add
add the key,say yes
then-$ssh -v git@heroku.com to connect git to heroku?

**changes made to the code so that it can be run by heroku
see the code

**after some definite changes to the code,do
git add 
git commit -m 'message'
git push

**to create heroku app
heroku create
git push heroku-to deploy to heroku

**TESTING
npm test cmd is used to run the test
the test property in package.json is changed.
use nodemon --exec "npm test" to make use of nodemon
create a cusom case called "test-watch":"nodemon --exec \"npm test\""
then execute,npm run test-watch in cmd line

**assertion library(expect)-used to remove redudancy in place of test cases inutils.test.js
expect is the module used in mocha to simplify the code,refer mjackson expect page to refer assertions like toBe,toBeA etc
expect module which is used as a function.
expect(result).toBe(44);
some assertions are-
toBe,toNotBe-for strings,numbers,boolean
toBeA('string') or number....
toEqual,toNotEqual-to compare 2 objects
toInclude,toExclude-whether a array/object includes/excludes an item


**MONGODB
open cmd in D:\Installed apps\mongodb\bin then type,
mongod.exe --dbpath "D:/Installed apps/mongodb/mongo-data"
**mongod.exe actually starts the server, mongo.exe is used to execute some commads related to mongodb like create collections,fill the database, etc
open another cmd in D:\Installed apps\mongodb\bin then type,
mongo.exe , hit enter.

**Robo 3t is a interface which lets us connect to the local database and real database.






